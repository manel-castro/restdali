import type { Metadata } from "next";
import { Inter, Montserrat, Open_Sans } from "next/font/google";
import StyledComponentsRegistry from "@/providers/styled-components-registry";
import "@/app/globals.css";
import Navbar from "@/sections/navbar";
import { NextIntlClientProvider, useLocale } from "next-intl";
import { notFound } from "next/navigation";
import getMessages from "@/i18n";

const inter = Inter({ subsets: ["latin"] });
const openSans = Open_Sans({
  weight: "400",
  subsets: ["latin"],
  variable: "--font-open-sans",
});
const montserrat = Montserrat({
  weight: "400",
  subsets: ["latin"],
  variable: "--font-montserrat",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
  params,
}: {
  children: React.ReactNode;
  params: { locale: string };
}) {
  const locale = useLocale();

  // Show a 404 error if the user requests an unknown locale
  if (params.locale !== locale) {
    notFound();
  }
  return (
    <html>
      <body
        style={{ height: "100vh", width: "100vw", overflow: "hidden" }}
        className={`${inter.className} ${openSans.variable} ${montserrat.variable}`}
      >
        <StyledComponentsRegistry>
          <ClientProvider locale={locale}>
            <Navbar locale={locale} />
            <div style={{ overflowY: "auto", height: "100%" }}>{children}</div>
          </ClientProvider>
        </StyledComponentsRegistry>
      </body>
    </html>
  );
}

// For next-intl client components
const ClientProvider = async ({
  children,
  locale,
}: {
  children: React.ReactNode;
  locale: string;
}) => {
  let messages;
  try {
    messages = (await import(`../../messages/${locale}.json`)).default;
  } catch (error) {
    notFound();
  }

  return (
    <NextIntlClientProvider locale={locale} messages={messages}>
      {children}{" "}
    </NextIntlClientProvider>
  );
};
